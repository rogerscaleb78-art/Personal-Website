@{
    ViewData["Title"] = "Home Page";
}

<!-- tsParticles CDN -->
<script src="https://cdn.jsdelivr.net/npm/tsparticles@2/tsparticles.bundle.min.js"></script>

<section id="intro" class="intro-section">
    <div id="tsparticles"></div> <!-- particles now inside hero -->
    <div id="hero-planet"></div>
    <div class="intro-content">
        <h1 class="intro-title">
            Hi, I'm <span class="highlight-name">Caleb</span>
        </h1>
        <p class="intro-subtitle">and I'm a Software Developer! 👩‍💻</p>

        <!-- Button scrolling to About section -->
        <a href="#about-section" class="btn-hero">
            See My Work 🡻
        </a>
    </div>
</section>

<section id="about-section" class="about-section">
    <div class="about-container">

        <!-- Left: Headshot + About Text -->
        <div class="about-left animate-on-scroll left">

            <!-- About Text -->
            <div class="about-text">
                <h2>About Me</h2>
                <div class="about-photo">
                    <img src="images/headshot.jpg" alt="Caleb's Headshot">
                </div>
                <p>
                    Hi, I’m [Your Name], an aspiring software engineer with a passion for building
                    efficient, user-friendly applications. My interests span across software design,
                    performance testing, and IT support. I enjoy learning new technologies and applying
                    them to solve real-world problems.
                </p>
            </div>
        </div>

        <!-- Right: Skills -->
        <div class="about-skills animate-on-scroll right">
            <h3>Languages & Frameworks</h3>
            <div class="skills-grid">
                <div class="skill">C#</div>
                <div class="skill">Java</div>
                <div class="skill">Python</div>
                <div class="skill">JavaScript</div>
                <div class="skill">ASP.NET Core</div>
                <div class="skill">React</div>
                <div class="skill">Unity</div>
                <div class="skill">SQL</div>
            </div>
        </div>

    </div>
</section>

<div class="timeline-header-parent">
    <h2 class="timeline-header">My Journey</h2>
</div>

<div class="timeline">

    <div class="timeline-item left">
        <div class="planet-container" id="planet1"></div>
        <div class="content">
            <h3>IT Support Specialist</h3>
            <h5>Culverhouse College of Business • 2023 – Present</h5>
            <p>Provided IT support for faculty, staff, and students. Developed custom solutions to streamline workflows and improve system performance.</p>
        </div>
    </div>

    <div class="timeline-item right">
        <div class="planet-container" id="planet2"></div>
        <div class="content">
            <h3>Software Developer Intern</h3>
            <h5>Protective Life • Summer 2024</h5>
            <p>Worked with the team to build a custom Jira Kanban board and integrated Confluence workflows. Improved transparency in project management.</p>
        </div>
    </div>

    <div class="timeline-item left">
        <div class="planet-container" id="planet3"></div>
        <div class="content">
            <h3>Student IT Technician</h3>
            <h5>University of Alabama • 2022 – 2023</h5>
            <p>Assisted with hardware/software troubleshooting, network support, and lab maintenance. Helped train new team members.</p>
        </div>
    </div>

    <!-- bottom endpoint -->
    <div class="timeline-endpoint"></div>
</div>


<script>
    document.addEventListener("DOMContentLoaded", () => {
      const items = document.querySelectorAll(".timeline-item");

      const observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add("show");
            // Optional: stop observing once shown
            observer.unobserve(entry.target);
          }
        });
      }, { threshold: 0.2 });

      items.forEach(item => observer.observe(item));
    });
</script>

<script>
    document.addEventListener("DOMContentLoaded", () => {
      const items = document.querySelectorAll(".animate-on-scroll");

      const observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add("show");
            observer.unobserve(entry.target); // stops re-triggering
          }
        });
      }, { threshold: 0.2 });

      items.forEach(item => observer.observe(item));
    });
</script>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        tsParticles.load("tsparticles", {
            particles: {
                number: {
                    value: 160,
                    density: { enable: true, area: 800 }
                },
                color: { value: ["#8B0000", "#00FFFF"] }, // deep red + cyan
                shape: { type: "circle" },
                opacity: {
                    value: 1,
                    random: true,
                    anim: { enable: true, speed: 1, opacity_min: 0, sync: false }
                },
                size: {
                    value: 2,  // smaller circles
                    random: true,
                    anim: { enable: false, speed: 4, size_min: 0.3, sync: false }
                },
                links: {
                    enable: true,
                    distance: 80,        // closer distance for more cohesion
                    color: "random",     // lines match particle colors
                    opacity: 0.5,
                    width: 1
                },
                move: {
                    enable: true,
                    speed: 1,
                    direction: "none",
                    random: true,
                    straight: false,
                    outModes: "out",
                    attract: { enable: false, rotateX: 600, rotateY: 600 }
                }
            },
            interactivity: {
                detectsOn: "window",
                events: {
                    onHover: { enable: true, mode: "grab" }, // lines appear on hover
                    onClick: { enable: true, mode: "repulse" },
                    resize: true
                },
                modes: {
                    grab: { distance: 150, links: { opacity: 0.7 } },
                    bubble: { distance: 250, size: 0, duration: 2, opacity: 0, speed: 3 },
                    repulse: { distance: 400, duration: 0.4 },
                    push: { quantity: 4 },
                    remove: { quantity: 2 }
                }
            },
            detectRetina: true
        });
    });
</script>


<script>
        document.addEventListener("DOMContentLoaded", () => {
      const timeline = document.querySelector(".timeline");

      const observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            timeline.classList.add("show");
            observer.unobserve(entry.target);
          }
        });
      }, { threshold: 0.2 });

      observer.observe(timeline);
    });

</script>

<!-- Your custom script -->
<!-- Your custom script -->
<script type="module">
    import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.152.2/build/three.module.js';

    const container = document.getElementById('hero-planet');

    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(
        50,
        container.clientWidth / container.clientHeight,
        0.1,
        1000
    );
    const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
    renderer.setSize(container.clientWidth, container.clientHeight);
    renderer.setPixelRatio(window.devicePixelRatio);
    container.appendChild(renderer.domElement);

    // Large sphere for moon
    const geometry = new THREE.SphereGeometry(5, 64, 64);
    const texture = new THREE.TextureLoader().load('moon.jpg'); // put in wwwroot/images
    const material = new THREE.MeshStandardMaterial({
        map: texture,
        color: 0xaaaaaa, // dim the moon slightly
        roughness: 0.8,  // softer light reflection
        metalness: 0,    // keep non-metallic
        emissive: 0x000000 // no self-illumination
    });
    const moon = new THREE.Mesh(geometry, material);
    scene.add(moon);

    // Lights
    const pointLight = new THREE.PointLight(0xffffff, 0.5); // softer intensity
    pointLight.position.set(10, 10, 10);
    scene.add(pointLight);

    const ambientLight = new THREE.AmbientLight(0xffffff, 0.2); // soft overall light
    scene.add(ambientLight);

    const hemiLight = new THREE.HemisphereLight(0xffffff, 0x444444, 0.15); // subtle top/bottom
    scene.add(hemiLight);

    // Camera position
    camera.position.z = 15;

    // Animate the moon
    function animate() {
        requestAnimationFrame(animate);
        moon.rotation.y += 0.0002; // very slow rotation
        renderer.render(scene, camera);
    }
    animate();

    // Handle window resize
    window.addEventListener('resize', () => {
        camera.aspect = container.clientWidth / container.clientHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(container.clientWidth, container.clientHeight);
    });

    // Optional: fade-in effect using CSS
    container.style.opacity = 0;
    container.style.transition = "opacity 2s ease-out";
    window.addEventListener('DOMContentLoaded', () => {
        container.style.opacity = 1;
    });
</script>
